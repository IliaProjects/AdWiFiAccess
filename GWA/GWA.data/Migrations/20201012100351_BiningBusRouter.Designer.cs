// <auto-generated />
using System;
using GWA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GWA.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201012100351_BiningBusRouter")]
    partial class BiningBusRouter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GWA.Data.Models.BindingRouterBus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("BusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusId")
                        .IsUnique();

                    b.HasIndex("RouterId")
                        .IsUnique();

                    b.ToTable("BindingRouterBuses");
                });

            modelBuilder.Entity("GWA.Data.Models.Bus", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Nr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Nr")
                        .IsUnique();

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("GWA.Data.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PlacedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GWA.Data.Models.OrderShare", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PlacedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrdersShare");
                });

            modelBuilder.Entity("GWA.Data.Models.Router", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Nr")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Online")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PlacedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Nr")
                        .IsUnique();

                    b.ToTable("Routers");
                });

            modelBuilder.Entity("GWA.Data.Models.Session", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("ConnectedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MadeAction")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderShareId");

                    b.HasIndex("RouterId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("GWA.Data.Models.SessionArchieved", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("ConnectedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("FullSession")
                        .HasColumnType("boolean");

                    b.Property<double>("InboundTrafficKiB")
                        .HasColumnType("double precision");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MadeAction")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("OutboundTrafficKiB")
                        .HasColumnType("double precision");

                    b.Property<string>("RouterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TerminationTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderShareId");

                    b.HasIndex("RouterId");

                    b.ToTable("SessionsArchieved");
                });

            modelBuilder.Entity("GWA.Data.Models.SessionHover", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("ConnectedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MadeAction")
                        .HasColumnType("integer");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrialLinkPartI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrialLinkPartII")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderShareId");

                    b.HasIndex("RouterId");

                    b.ToTable("SessionsHover");
                });

            modelBuilder.Entity("GWA.Data.Models.SessionHoverInvalid", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("ConnectedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MadeAction")
                        .HasColumnType("integer");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderShareId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RouterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrialLinkPartI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrialLinkPartII")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderShareId");

                    b.HasIndex("RouterId");

                    b.ToTable("SessionsHoverInvalid");
                });

            modelBuilder.Entity("GWA.Data.Models.BindingRouterBus", b =>
                {
                    b.HasOne("GWA.Data.Models.Bus", "Bus")
                        .WithMany("BindingRouterBuses")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.Router", "Router")
                        .WithMany("BindingRouterBuses")
                        .HasForeignKey("RouterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GWA.Data.Models.Session", b =>
                {
                    b.HasOne("GWA.Data.Models.Order", "Order")
                        .WithMany("Sessions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.OrderShare", "OrderShare")
                        .WithMany("Sessions")
                        .HasForeignKey("OrderShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.Router", "Router")
                        .WithMany("Sessions")
                        .HasForeignKey("RouterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GWA.Data.Models.SessionArchieved", b =>
                {
                    b.HasOne("GWA.Data.Models.Order", "Order")
                        .WithMany("SessionsArchieve")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.OrderShare", "OrderShare")
                        .WithMany("SessionsArchieve")
                        .HasForeignKey("OrderShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.Router", "Router")
                        .WithMany("SessionsArchieve")
                        .HasForeignKey("RouterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GWA.Data.Models.SessionHover", b =>
                {
                    b.HasOne("GWA.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.OrderShare", "OrderShare")
                        .WithMany()
                        .HasForeignKey("OrderShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.Router", "Router")
                        .WithMany()
                        .HasForeignKey("RouterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GWA.Data.Models.SessionHoverInvalid", b =>
                {
                    b.HasOne("GWA.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.OrderShare", "OrderShare")
                        .WithMany()
                        .HasForeignKey("OrderShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GWA.Data.Models.Router", "Router")
                        .WithMany()
                        .HasForeignKey("RouterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
